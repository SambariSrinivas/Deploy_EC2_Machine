# This is the workflow to  get started with Actions
name: 'Terraform-AWS-EC2

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  # Creating Terraform job with name "Terraform" with various steps also setting up the defaults and env variables
  terraform:
    name: "Terraform"
    defaults:
      run:
        working-directory: envs/dev
     # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRETE_ID }}
      AWS_REGION: 'us-east-1'
    # defining the series of steps of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE
      - name: Checkout
        uses: actions/checkout@v2
      # Install Terraform
      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v1.2.1
      # Format Terraform
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      # Initiate Terraform
      - name: Terraform Init
        id: init
        run: terraform init
      # Validate Terraform
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      # Plan Terraform
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
      # update pull request
      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      # check the plan status if it fails exit from the job
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      # Apply Terraform in AWS cloud
      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve